CONDITIONAL OPERATORS
Introduction to Conditional Operators
Java includes operators that only use boolean values. These conditional operators help simplify expressions containing complex boolean relationships by reducing multiple boolean values to a single value: true or false.

For example, what if we want to run a code block only if multiple conditions are true. We could use the AND operator: &&.

Or, we want to run a code block if at least one of two conditions are true. We could use the OR operator: ||.

Finally, we can produce the opposite value, where true becomes false and false becomes true, with the NOT operator: !.

Understanding these complex relationships can feel overwhelming at first. Luckily, truth tables, like the ones seen to the right, can assist us in determining the relationship between two boolean-based conditions.

In this lesson, we’ll explore each of these conditional operators to see how they can be implemented into our conditional statements.



public class Reservation {
  int guestCount;
  int restaurantCapacity;
  boolean isRestaurantOpen;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, boolean open) {
    if (count < 1 || count > 8) {
      System.out.println("Invalid reservation!");
    }
    guestCount = count;
		restaurantCapacity = capacity;
		isRestaurantOpen = open;
  }  
  
  public void confirmReservation() {
    if (restaurantCapacity >= guestCount && isRestaurantOpen) {
      System.out.println("Reservation confirmed");
      isConfirmed = true;
    } else {
      System.out.println("Reservation denied");
			isConfirmed = false;
    }
  }
  
  public void informUser() {
    if (!isConfirmed) {
      System.out.println("Unable to confirm reservation, please contact restaurant.");
    } else {
      System.out.println("Please enjoy your meal!");
    }
  }
  
  public static void main(String[] args) {
    Reservation partyOfThree = new Reservation(3, 12, true);
    Reservation partyOfFour = new Reservation(4, 3, true);
    partyOfThree.confirmReservation();
    partyOfThree.informUser();
    partyOfFour.confirmReservation();
    partyOfFour.informUser();
  }
}







public class Reservation {
  int guestCount;
  int restaurantCapacity;
  boolean isRestaurantOpen;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, boolean open) {
    guestCount = count;
		restaurantCapacity = capacity;
		isRestaurantOpen = open;
  }  
  
  public void confirmReservation() {
    /* 
       Write conditional
       ~~~~~~~~~~~~~~~~~
       if restaurantCapacity is greater
       or equal to guestCount
       AND
       the restaurant is open:
         print "Reservation confirmed"
         set isConfirmed to true
       else:
         print "Reservation denied"
         set isConfirmed to false
    */
if (restaurantCapacity >= guestCount && isRestaurantOpen) {
 System.out.println("Reservation confirmed");
 isConfirmed = true;
} else {
  System.out.print("Reservation denied.");
  isConfirmed = false;

}
  }
  public void informUser() {
    System.out.println("Please enjoy your meal!");
  }
  
  public static void main(String[] args) {
    Reservation partyOfThree = new Reservation(3, 12, true);
    Reservation partyOfFour = new Reservation(4, 3, true);
    partyOfThree.confirmReservation();
    partyOfThree.informUser();
    partyOfFour.confirmReservation();
    partyOfFour.informUser();
  }
}




ONDITIONAL OPERATORS
Conditional-Or: ||
The requirements of our enrollment program have changed again. Certain courses have prerequisites that are satisfied by multiple courses. As long as students have taken at least one prerequisite, they should be allowed to enroll.

Here’s one way we could write the code:

if (hasAlgebraPrerequisite) {
  // Enroll in course
}
 
if (hasGeometryPrerequisite) {
  // Enroll in course
}
We’re using two different if-then statements with the same code block. We can be more concise with the OR operator:

if (hasAlgebraPrerequisite || hasGeometryPrerequisite) {
  // Enroll in course
}
The OR operator, ||, is used between two boolean values and evaluates to a single boolean value. If either of the two values is true, then the resulting value is true, otherwise the resulting value is false.

This code illustrates every combination:

true || true
// true
false || true
// true
true || false
// true
false || false
// false
Keep Reading: AP Computer Science A Students

On some occasions, the compiler can determine the truth value of a logical expression by only evaluating the first boolean operand; this is known as short-circuited evaluation. Short-circuited evaluation only works with expressions that use && or ||.

In an expression that uses ||, the resulting value will be true as long as one of the operands has a true value. If the first operand of an expression is true, we don’t need to see what the value of the other operand is to know that the final value will also be true.

For example, we can run the following code without error despite dividing a number by 0 in the second operand because the first operand had a true value:

if (1 > 0 || 2 / 0 == 7) {
  System.out.println("No errors here!");
}
An expression that uses && will only result in true if both operands are true. If the first operand in the expression is false, the entire value will be false.









public class Reservation {
  int guestCount;
  int restaurantCapacity;
  boolean isRestaurantOpen;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, boolean open) {
    // Write conditional statement below

if (count < 1 || count > 8) {
System.out.println("Invalid reservation!");
}    
    
    guestCount = count;
		restaurantCapacity = capacity;
		isRestaurantOpen = open;


  }  
  
  public void confirmReservation() {
    if (restaurantCapacity >= guestCount && isRestaurantOpen) {
      System.out.println("Reservation confirmed");
      isConfirmed = true;
    } else {
      System.out.println("Reservation denied");
			isConfirmed = false;
    }
  }
  
  public void informUser() {
    System.out.println("Please enjoy your meal!");
  }
  
  public static void main(String[] args) {
    Reservation partyOfThree = new Reservation(3, 12, true);
    Reservation partyOfFour = new Reservation(4, 3, true);
    partyOfThree.confirmReservation();
    partyOfThree.informUser();
    partyOfFour.confirmReservation();
    partyOfFour.informUser();
  }
}





public class Reservation {
  int guestCount;
  int restaurantCapacity;
  boolean isRestaurantOpen;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, boolean open) {
    if (count < 1 || count > 8) {
      System.out.println("Invalid reservation!");
      System.out.println("Unable to confirm reservation, please contact restaurant.");
    }
    guestCount = count;
		restaurantCapacity = capacity;
		isRestaurantOpen = open;
  }  
  
  public void confirmReservation() {
    if (restaurantCapacity >= guestCount && isRestaurantOpen) {
      System.out.println("Reservation confirmed");
      System.out.println("Please enjoy your meal!");
      isConfirmed = true;
    } else {
      System.out.println("Reservation denied");
       System.out.println("Unable to confirm reservation, please contact restaurant.");
			isConfirmed = false;
    }
  }
  
  public void informUser() {
    if (!isConfirmed) {
      System.out.println("Unable to confirm reservation, please contact restaurant.");
    } else {
      System.out.println("Please enjoy your meal!");
    }
  }
  
  public static void main(String[] args) {
    Reservation Steve = new Reservation(4, 28, true);
    Steve.confirmReservation();
    Reservation Jimminy = new Reservation(0, 28, true);
    Jimminy.guestCount =5;
    Jimminy.confirmReservation();
    
  }
}










public class Reservation {
  int guestCount;
  int restaurantCapacity;
  double bookingTime;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, double timeOfReservation) {
    if (count < 1 || count > 8) {
      System.out.println("Invalid reservation!");
      System.out.println("Unable to confirm reservation, please contact restaurant.");
    }
    guestCount = count;
		restaurantCapacity = capacity;
		bookingTime = timeOfReservation;
  }  


  
  public void confirmReservation() {
    if (restaurantCapacity >= guestCount) && (bookingTime >= 11) && (bookingTime <=21) {
      System.out.println("Reservation confirmed");
      System.out.println("Please enjoy your meal!");
      isConfirmed = true;
    } else {
      System.out.println("Reservation denied");
       System.out.println("Unable to confirm reservation, please contact restaurant.");
			isConfirmed = false;
    }
  }
  
  public void informUser() {
    if (!isConfirmed) {
      System.out.println("Unable to confirm reservation, please contact restaurant.");
    } else {
      System.out.println("Please enjoy your meal!");
    }
  }
  
  public static void main(String[] args) {
    Reservation Steve = new Reservation(4, 28, 10);
    Steve.confirmReservation();
    Reservation Jimminy = new Reservation(0, 28, 16.5);
    Jimminy.guestCount =5;
    Jimminy.confirmReservation();
    
  }
}





public class Reservation {
  int guestCount;
  int restaurantCapacity;
  double bookingTime;
  boolean isConfirmed;
  
  public Reservation(int count, int capacity, double timeOfReservation) {
    if (count < 1 || count > 8) {
      System.out.println("Invalid reservation!");
      System.out.println("Unable to confirm reservation, please contact restaurant.");
    }
    guestCount = count;
		restaurantCapacity = capacity;
		bookingTime = timeOfReservation;
  }  


  
  public void confirmReservation() {
    if ((restaurantCapacity >= guestCount) && (bookingTime >= 11) && !(bookingTime > 21) ) {
      System.out.println("Reservation confirmed");
      System.out.println("Please enjoy your meal!");
      isConfirmed = true;
    } else {
      System.out.println("Reservation denied");
       System.out.println("Unable to confirm reservation, please contact restaurant.");
			isConfirmed = false;
    }
  }
  
  public void informUser() {
    if (!isConfirmed) {
      System.out.println("Unable to confirm reservation, please contact restaurant.");
    } else {
      System.out.println("Please enjoy your meal!");
    }
  }
  
  public static void main(String[] args) {
    Reservation Steve = new Reservation(4, 28, 10);
    Steve.confirmReservation();
    Reservation Jimminy = new Reservation(0, 28, 16.5);
    Jimminy.guestCount =5;
    Jimminy.confirmReservation();
    Reservation Sandra = new Reservation(9, 28, 12);
    Sandra.guestCount =8;
    Sandra.confirmReservation();
    Reservation Trevor = new Reservation(5, 28, 21.5);
    Trevor.confirmReservation();

  }
}



public class Reservation {
    int guestCount;
    int restaurantCapacity;
    double bookingTime;
    boolean isConfirmed;

    public Reservation(int count, int capacity, double timeOfReservation) {

guestCount = count;
        restaurantCapacity = capacity;
        bookingTime = timeOfReservation;

        if ((restaurantCapacity >= guestCount) && (bookingTime >= 11) && (bookingTime <= 21) && (guestCount >= 1) && (guestCount <= 8) ) {
            System.out.println("Reservation confirmed");
            System.out.println("Please enjoy your meal!");
            isConfirmed = true;
        } else {
            System.out.println("Reservation denied");
            System.out.println("Unable to confirm reservation, please contact restaurant.");
            isConfirmed = false;
        }
        
    }















    public void confirmReservation() {
        if ((restaurantCapacity >= guestCount) && (bookingTime >= 11) && !(bookingTime > 21) && (guestCount < 1 || guestCount > 8)  ) {
            System.out.println("Reservation confirmed");
            System.out.println("Please enjoy your meal!");
            isConfirmed = true;
        } else {
            System.out.println("Reservation denied");
            System.out.println("Unable to confirm reservation, please contact restaurant.");
            isConfirmed = false;
        }
    }

    public void informUser() {
        if (!isConfirmed) {
            System.out.println("Unable to confirm reservation, please contact restaurant.");
        } else {
            System.out.println("Please enjoy your meal!");
        }
    }

    public static void main(String[] args) {
        Reservation Steve = new Reservation(4, 28, 10);
        Steve.confirmReservation();
        Reservation Jimminy = new Reservation(0, 28, 16.5);
        Jimminy.guestCount =5;
        Jimminy.confirmReservation();
        Reservation Sandra = new Reservation(9, 28, 12);
        Sandra.guestCount =8;
        Sandra.confirmReservation();
        Reservation Trevor = new Reservation(5, 28, 21.5);
        Trevor.confirmReservation();
        Reservation Trevor = new Reservation(26, 28, 4);
        Trevor.confirmReservation();
        
    }
}











public class Reservation {
    int guestCount;
    int restaurantCapacity;
    double bookingTime;
    boolean isConfirmed;
    String bookingName;


    public Reservation(String nameOfBooker, int count, int capacity, double timeOfReservation) {

        guestCount = count;
        restaurantCapacity = capacity;
        bookingTime = timeOfReservation;
        bookingName = nameOfBooker;

        if ((restaurantCapacity >= guestCount) && (bookingTime >= 11) && (bookingTime <= 21) && (guestCount >= 1) && (guestCount <=8) ) {
            System.out.print(bookingName + " your reservation has been confirmed. ");
            System.out.println("Please enjoy your meal!");
            isConfirmed = true;
        } else {
            System.out.print("Sorry " + bookingName + " but your reservation has been denied. ");
            System.out.println(" Please contact the restaurant.");
            isConfirmed = false;
        }
        
    }



    public void confirmReservation() {
        if ((restaurantCapacity >= guestCount) && (bookingTime >= 11) && (bookingTime <= 21) && (guestCount >= 1) && (guestCount <=8) )     
         {
            System.out.print(bookingName + " your reservation has been confirmed. ");
            System.out.println("Please enjoy your meal!");
            isConfirmed = true;
        } else {
            System.out.print("Sorry " + bookingName + " but your reservation has been denied. ");
            System.out.println("Please contact restaurant.");
            isConfirmed = false;
        }
    }

    public void informUser() {
        if (!isConfirmed) {
            System.out.println("Unable to confirm reservation, please contact restaurant.");
        } else {
            System.out.println("Please enjoy your meal!");
        }
    }

    public static void main(String[] args) {
        Reservation Steve34 = new Reservation("Steve Mclane", 4, 28, 10);
        Steve34.bookingTime = 11.5;
        Steve34.confirmReservation();
        Reservation Jimminy = new Reservation("Jimminy Cricket", 0, 28, 16.5);
        Jimminy.guestCount =5;
        Jimminy.confirmReservation();
        Reservation Sandra = new Reservation("Sandra Bullock", 9, 28, 12);
        Sandra.guestCount =8;
        Sandra.confirmReservation();
        Reservation Jeff = new Reservation("Jeff Hurst", 5, 28, 21.5);
        Jeff.bookingTime = 20.5;
        Jeff.confirmReservation();
        Reservation Trevor = new Reservation("Trevor MacDonald", 26, 28, 4);
        Trevor.bookingTime = 14;
        Trevor.guestCount = 6;
        Trevor.confirmReservation();
        Reservation Kris = new Reservation ("Kris Kringle", 7, 28, 13);
        
    }
}
